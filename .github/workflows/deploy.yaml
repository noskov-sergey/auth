name: Deploy

on:
  push:
    branches: [ main, master ]

env:
  REGISTRY: "cr.selcloud.ru/noskov-sergey"
  IMAGE_NAME: "auth-server"
  CONTAINER_NAME: "auth-server-container"

jobs:
  linter:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache: false
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.54
          args: --timeout=30m --config=./.golangci.pipeline.yaml --issues-exit-code=0

  build-and-test:
    runs-on: ubuntu-latest
    needs: linter
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          cache-dependency-path: go.sum

      - name: Build
        run: go build -o ./bin/ -v ./...

      - name: Test
        run: go test -v ./...

  image-build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        run: docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY

      - name: Build and Push Docker image
        run: |
          docker buildx create --use
          docker buildx build --no-cache --push --tag $REGISTRY/$IMAGE_NAME:latest .

  deploy-image:
    runs-on: ubuntu-latest
    needs: image-build-and-push

    steps:
      - name: Deploy to Selectel Cloud via SSH action
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          envs: IMAGE_NAME, REGISTRY, GITHUB_SHA, CONTAINER_NAME
          script: |
            # Login into Selectel Registry
            docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} $REGISTRY
            
            # Pull new registry container
            docker pull $REGISTRY/$IMAGE_NAME:latest
            
            touch .env
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo MIGRATION_DIR=${{ secrets.MIGRATION_DIR }} >> .env
            echo PG_DSN=${{ secrets.PG_DSN }} >> .env
            echo MIGRATION_DSN=${{ secrets.MIGRATION_DSN }} >> .env
            echo GRPC_HOST=${{ secrets.GRPC_HOST }} >> .env
            echo GRPC_PORT=${{ secrets.GRPC_PORT }} >> .env
          
            # Run a new container from a new image
            docker-compose up -d --force-recreate --build auth
            
            # Run migrations1
            docker-compose up -d --force-recreate --build migrator